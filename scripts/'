''' ==================================================================================================
This code creates the SPARC11b.rxn file to add SOM precursor so that it runs prep.exe and creates
saprc14_rev1.mod and SAPRC14_rev1.f files

written by Ali Akherati October 2018 Colorado State University
================================================================================================== '''

import numpy as np
import pandas as pd
import pygsheets as pyg
#import subprocess as sp
import time
import re
import os
import sys
import datetime as dt
import math

# Clean ipython
# ====================================================================================================
#from IPython import get_ipython
#get_ipython().magic('reset -sf') 

startTime = time.time()

# Run the python script to run the actual model
# ====================================================================================================
#njobs = 0 # what job you're on
#maxjobs = 100 # how many jobs you can run. For ozone, max is 16
#queue = 'defaultfaculty.q@@students'
queue = 'defaultfaculty.q'
#queue = 'jathar.q'

# INPUTS
# ====================================================================================================
# Pick a day to run:
#day = '04272016'
#day = '04282016'
#day = '05112016'
#day = '09112016'
day = '09172016'

NAME = '%s_Nucleation'%day
#NAME = '09112016_Nucleation'
emiss_sheetname = day

#           BNZ,   TOL,   XYL,    ISP,   TRP
DLVP_v = '1.97 1.77 2.05 2.25 1.97' 

aadt = 10  # microphysics timestep [s]
nintern = 1 # frequency of printing values or number of internal microphysics steps
# adt = aadt*nintern # timestep for writing output [seconds]  

COAG = 1    # [0 or 1] the switch for On/Off coagulation
VWL  = [1]  # [0 or 1] the switch for On/Off vapor wall loss
PWL  = [0]  # [0 or 1] the switch for On/Off particle wall loss

ke      = 0.0        # loss rate constant
kw0     = 0.0        # loss rate constant

alpha   = 1.0        # accommodation coefficient 
storg   = 0.025      # [N/m] surface tension
Dbk     = [1.0E-10]  # particle-phase diffusion coefficient [m2/s]
kc      = 0.0        # first-order loss rate of species in the particle phase [1/s]
boxvol  = 10000000.0 # teflon [cm3] - [CalTech 24 m3, CSU 10 m3, CMU ?? m3]

if day == '05112016':
  endtime = [10.0]     # [hours] hours of run time (make even hours)
  pres    = 101325.0   # [Pa] pressure                     
#                      9/17/2016, 5/11/2016, 9/11/2016, 4/27/2016, 4/28/2016 
  temp    = 298.0      # 296,          298,       293,       294,      293  [K] temperature
  rh      = 0.7        #  .7           .7         .5        .55        .5   relative humidity

#                  9/17/2016, 5/11/2016, 9/11/2016, 4/27/2016, 4/28/2016
  No_bg1 = 1151.    # 959.,     1151.,    1500,    166,      281 [#/cm3]
  Dpm_bg1 = 51.3e-3 # 66.e-3,   51.3e-3,  71.e-3,  39.6e-3,  30.e-3 microns
  sigma_bg1 = 1.6   # 1.8,      1.6,      2.1,     1.6,      1.2
  No_bg2 = 265.     # 50.,      256.,     188.,    158,      273. [#/cm3]
  Dpm_bg2 = 160.e-3 # 223.e-3,  160.e-3,  83.e-3,  132.e-3,  56.3e-3 microns
  sigma_bg2 = 1.3   # 1.2,      1.3,      1.1,     1.4,      1.3
  orgfrac_bg = 0.7  # 0.9,      0.7,      0.7,     0.8,      0.7
  nh3_ppt = [2000.] 
  lower = dt.datetime(2016, 5, 11,5,30)
  sheetname1 = 'sgpbeflux1longC1.c1.20160511.000000.custom'
  sheetname2 = 'sgpbeflux1longC1.c1.20160512.000000.custom'
#  OH_scale = 4.0
elif day == '04272016':
  endtime = [8.0]     # [hours] hours of run time (make even hours)
  pres    = 101325.0   # [Pa] pressure                     
                       # 9/17/2016, 5/11/2016, 9/11/2016, 4/27/2016, 4/28/2016 
  temp    = 294.0      # 296,          298,       293,       294,      293  [K] temperature
  rh      = 0.55       #  .7           .7         .5        .55        .5   relative humidity

#                      9/17/2016, 5/11/2016, 9/11/2016, 4/27/2016, 4/28/2016
  No_bg1 = 166.        # 959.,     1151.,    1500,    166,      281 [#/cm3]
  Dpm_bg1 = 39.6e-3    # 66.e-3,   51.3e-3,  71.e-3,  39.6e-3,  30.e-3 microns
  sigma_bg1 = 1.6      # 1.8,      1.6,      2.1,     1.6,      1.2
  No_bg2 = 158.        # 50.,      256.,     188.,    158,      273. [#/cm3]
  Dpm_bg2 = 132.e-3    # 223.e-3,  160.e-3,  83.e-3,  132.e-3,  56.3e-3 microns
  sigma_bg2 = 1.4      # 1.2,      1.3,      1.1,     1.4,      1.3
  orgfrac_bg = 0.8     # 0.9,      0.7,      0.7,     0.8,      0.7
  nh3_ppt = [2000.] 
  lower = dt.datetime(2016,4,27,11,45)
  sheetname1 = 'sgpbeflux1longC1.c1.20160427.000000.custom'
  sheetname2 = 'sgpbeflux1longC1.c1.20160428.000000.custom'
#  OH_scale = 1.9
elif day == '04282016':
  endtime = [10.0]     # [hours] hours of run time (make even hours)
  pres    = 101325.0   # [Pa] pressure                    
#                      9/17/2016, 5/11/2016, 9/11/2016, 4/27/2016, 4/28/2016 
  temp    = 293.0      # 296,          298,       293,       294,      293  [K] temperature
  rh      = 0.5        #  .7           .7         .5        .55        .5   relative humidity

#                      9/17/2016, 5/11/2016, 9/11/2016, 4/27/2016, 4/28/2016
  No_bg1 = 281.        # 959.,     1151.,    1500,    166,      281 [#/cm3]
  Dpm_bg1 = 30.e-3     # 66.e-3,   51.3e-3,  71.e-3,  39.6e-3,  30.e-3 microns
  sigma_bg1 = 1.2      # 1.8,      1.6,      2.1,     1.6,      1.2
  No_bg2 = 273.        # 50.,      256.,     188.,    158,      273. [#/cm3]
  Dpm_bg2 = 56.e-3     # 223.e-3,  160.e-3,  83.e-3,  132.e-3,  56.3e-3 microns
  sigma_bg2 = 1.3      # 1.2,      1.3,      1.1,     1.4,      1.3
  orgfrac_bg = 0.7     # 0.9,      0.7,      0.7,     0.8,      0.7
  nh3_ppt = [2000.] 
  lower = dt.datetime(2016,4,28,5,30)
  sheetname1 = 'sgpbeflux1longC1.c1.20160428.000000.custom'
  sheetname2 = 'sgpbeflux1longC1.c1.20160429.000000.custom'
#  OH_scale = 3.2
elif day == '09112016':
  endtime = [10.0]     # [hours] hours of run time (make even hours)
  pres    = 101325.0   # [Pa] pressure                     
#                      9/17/2016, 5/11/2016, 9/11/2016, 4/27/2016, 4/28/2016 
  temp    = 293.0      # 296,          298,       293,       294,      293  [K] temperature
  rh      = 0.5        #  .7           .7         .5        .55        .5   relative humidity

#                      9/17/2016, 5/11/2016, 9/11/2016, 4/27/2016, 4/28/2016
  No_bg1 = 1500.       # 959.,     1151.,    1500,    166,      281 [#/cm3]
  Dpm_bg1 = 71.e-3     # 66.e-3,   51.3e-3,  71.e-3,  39.6e-3,  30.e-3 microns
  sigma_bg1 = 2.1      # 1.8,      1.6,      2.1,     1.6,      1.2
  No_bg2 = 188.        # 50.,      256.,     188.,    158,      273. [#/cm3]
  Dpm_bg2 = 83.e-3     # 223.e-3,  160.e-3,  83.e-3,  132.e-3,  56.3e-3 microns
  sigma_bg2 = 1.1      # 1.2,      1.3,      1.1,     1.4,      1.3
  orgfrac_bg = 0.7     # 0.9,      0.7,      0.7,     0.8,      0.7
  nh3_ppt = [2000.] 
  lower = dt.datetime(2016, 9, 11,5,30)
  sheetname1 = 'sgpbeflux1longC1.c1.20160911.000000.custom'
  sheetname2 = 'sgpbeflux1longC1.c1.20160912.000000.custom'

elif day == '09172016':
  endtime = [10.0]     # [hours] hours of run time (make even hours)
  pres    = 101325.0   # [Pa] pressure                    
  #                    9/17/2016, 5/11/2016, 9/11/2016, 4/27/2016, 4/28/2016 
  temp    = 296.0      # 296,          298,       293,       294,      293  [K] temperature
  rh      = 0.7        #  .7           .7         .5        .55        .5   relative humidity

#                      9/17/2016, 5/11/2016, 9/11/2016, 4/27/2016, 4/28/2016
  No_bg1 = 959.        # 959.,     1151.,    1500,    166,      281 [#/cm3]
  Dpm_bg1 = 66.e-3     # 66.e-3,   51.3e-3,  71.e-3,  39.6e-3,  30.e-3 microns
  sigma_bg1 = 1.8      # 1.8,      1.6,      2.1,     1.6,      1.2
  No_bg2 = 50.         # 50.,      256.,     188.,    158,      273. [#/cm3]
  Dpm_bg2 = 223.e-3    # 223.e-3,  160.e-3,  83.e-3,  132.e-3,  56.3e-3 microns
  sigma_bg2 = 1.2      # 1.2,      1.3,      1.1,     1.4,      1.3
  orgfrac_bg = 0.9     # 0.9,      0.7,      0.7,     0.8,      0.7
  nh3_ppt = [2000.] 
  lower = dt.datetime(2016,9,17,5,30)
  sheetname1 = 'sgpbeflux1longC1.c1.20160917.000000.custom'
  sheetname2 = 'sgpbeflux1longC1.c1.20160918.000000.custom'

else:
  sys.exit('Invalid day or no day selected')

density_bg = orgfrac_bg*1400.0+(1-orgfrac_bg)*1770 # [kg/m3]

# nucleation parameters
# ----------------------------------------------------------
#                # 5/11/2016, 9/17/2016, 9/11/2016

fion = 8.0       # [cm-3 s-]
cstar_nuc = 1e-3 # [ug m-3]
org_nuc = 1      # switch for organic nucleation [0 or 1]
inorg_nuc = 1    # switch for inorganic nucleation [0 or 1]
#nh3_ug = [0.4]    # [1.], [0.4], 
#nh3_moleccm3 = [nh3_ug[i]*1e-6/17.0*6.022e23/100**3 for i in range(len(nh3_ug))] # NH3 concentration [molec/cm^3]
nh3_moleccm3 = [nh3_ppt[i]*1e-12*pres*6.022e23/temp/8.3145*1e-6 for i in range(len(nh3_ppt))] # concentration of NH3 [molec/cm^3]
h2so4_cm3 = 1e7  # Doesn't do anything now that H2SO4 is prognostic SamO 

# directory information
# ====================================================================================================
script_directory = os.popen('pwd').read()[:-1]
src_directory = script_directory[:-(len('scripts'))] + 'src'
run_directory = script_directory[:-(len('scripts'))] + 'runs'

gc = pyg.authorize(service_file='../inputs/SOMTOMAS-Sam-GoogleSheetAccess.json')
gsh_emission = gc.open('Emission_SOM-TOMAS.2')
df_emiss = gsh_emission.worksheet_by_title(title='%s'%emiss_sheetname).get_as_df()

#gsh_input = gc.open('Atmospheric_fire_inputs')
#df_input = gsh_input.worksheet_by_title(title='Corg10').get_as_df()

# Reading radiation Google sheet for OH calculations - added by SamO - 7/2/2020
#=====================================================================================================

gsh_rad = gc.open('Radiation_data')
df_1 = gsh_rad.worksheet_by_title(title='%s'%sheetname1).get_as_df()
df_2 = gsh_rad.worksheet_by_title(title='%s'%sheetname2).get_as_df()

index  = np.where(df_1.iloc[:,0]!='')[0].shape[0]
sizedist1 = df_1['short_direct_normal'].iloc[:index].to_numpy()
time1 = np.array(df_1['time_offset'].iloc[:index])

index  = np.where(df_2.iloc[:,0]!='')[0].shape[0]
sizedist2 = df_2['short_direct_normal'].iloc[:index].to_numpy()
time2 = np.array(df_2['time_offset'].iloc[:index])

sizedist1 = pd.to_numeric(sizedist1)
sizedist2 = pd.to_numeric(sizedist2)

year1 = int(sheetname1[20:24])
month1 = int(sheetname1[24:26])
day1 = int(sheetname1[26:28])
print('Running day: %s/%s/%s' %(year1,month1, day1))
date1 = []

for i in range(len(time1)):
  date1.append(dt.datetime(year1,month1,day1,int(time1[i][0:2]),int(time1[i][3:5]),int(time1[i][6:8])))
date1 = np.array(date1)
date1 = date1 - dt.timedelta(seconds=21600)


year2 = int(sheetname2[20:24])
month2 = int(sheetname2[24:26])
day2 = int(sheetname2[26:28])
#print(year2,month2,day2)
date2 = []

for i in range(len(time2)):
  date2.append(dt.datetime(year2,month2,day2,int(time2[i][0:2]),int(time2[i][3:5]),int(time2[i][6:8])))
date2 = np.array(date2)
date2 = date2 - dt.timedelta(seconds=21600)

date = np.append(date1,date2)
sizedist = np.append(sizedist1,sizedist2)

upper = lower + dt.timedelta(hours = endtime[0])
low = np.where(date>lower)[0][0]
up = np.where(date>upper)[0][0]
SW_cut = sizedist[low:up]
date_cut = date[low:up]

x1 = np.linspace(0,len(SW_cut),int(endtime[0]*60*60/10))
x2 = np.arange(0,len(SW_cut))
DWSW = np.interp(x1,x2,SW_cut)

print('DWSW[0:10]',DWSW[0:10])

f3 = open('../inputs/SW_Rad','w')
for i in range(len(DWSW)):
  if DWSW[i]<0.0 or math.isnan(DWSW[i]) == True:
    DWSW[i] = 0.0
  f3.write('%s\n'%str(DWSW[i]))
f3.close()

# Regime and Parameter names - Changed by SamO 
# ====================================================================================================
regime = str(cstar_nuc)
params = str(temp) 

       
# --- read input sheet --------------------------------------------------------------  
No1     = 0.0 #df_input.loc[df_input['variables']=='No_1', 'Manish_10_1.5e6']# [# cm-3] background 1st number conc.
Dpm1    = 80e-3 #df_input.loc[df_input['variables']=='Dpm_1', 'Manish_10_1.5e6'].iloc[0]*1.0e-3 # [microns] background 1st median diameter
sigma1  = 1.8 #df_input.loc[df_input['variables']=='sigma_1', 'Manish_10_1.5e6'].iloc[0]# 1st background sigma 
No2     = 0.0 #df_input.loc[df_input['variables']=='No_2', 'Manish_10_1.5e6'].iloc[0]# [# cm-3] background 2nd number conc.
Dpm2    = 80e-3 #df_input.loc[df_input['variables']=='Dpm_2', 'Manish_10_1.5e6'].iloc[0]*1.0e-3# [microns] background 2nd median diameter
sigma2  = 1.8 #df_input.loc[df_input['variables']=='sigma_2', 'Manish_10_1.5e6'].iloc[0]# 2nd background sigma 

# the following values are for OH concentration equation
# OH_conc = a_oh*exp(-1.*ax_oh*t) + b_oh*exp(-1.*bx_oh*t) - t in hour and unit is [Molecules/cm3]
lights_on = 0.0 #df_input.loc[df_input['variables']=='lights on', 'Manish'].iloc[0] # [s] of the day
a_oh      = [0.0]#, 3e6, 5e6, 1e7, 5e7, 1e8] #df_input.loc[df_input['variables']=='a_oh', 'Manish'].iloc[0]
ax_oh     = 0.0 #df_input.loc[df_input['variables']=='ax_oh', 'Manish'].iloc[0]
b_oh      = 0.0 #df_input.loc[df_input['variables']=='b_oh', 'Manish'].iloc[0]
bx_oh     = 0.0 #df_input.loc[df_input['variables']=='bx_oh', 'Manish'].iloc[0]
OH0       = np.array(a_oh)*np.exp(-1.*ax_oh*0.) + b_oh*np.exp(-1.*bx_oh*0.)
OH_scale = 4.0  # scalar for OH concentration 

# 1.5e7*exp(-1.*t)+ 5e6*exp(-0.05*t) t in hour

nsomprec    = 5 # number of som precursors for parameterizations or SOM grids ***** 1 for now
somprecname = 'BNZSOMG TOLSOMG XYLSOMG ISPSOMG TRPSOMG' # som precursor parameterization's name
dlvp        = DLVP_v

seed_dens = 1.4 #df_input.loc[df_input['variables']=='POA density', 'AGU2019_F007'].iloc[0]*1.0e+3
poa_1stname = 'SVO_C10'
poa_1st_lenname = len(poa_1stname)

iorg  = 264  # SamO changed from 893
ibins = 40   # number of bins
idiag = 2    # number of diagnostic species including sulfate and ammonia (2)

index  = np.where(df_emiss.iloc[:,0]!='')[0].shape[0] 
spname = df_emiss['species'].iloc[:index]
g_ippm = df_emiss['gas_id'].iloc[:index]
p_frac = df_emiss['pfrac_id'].iloc[:index]
nspemiss = len(spname)
emiss_spname = ''
emiss_ippm   = ''
seed_frac    = ''
for i in range(len(spname)):
 emiss_spname = emiss_spname +   '%15s'%(spname.iloc[i])
 emiss_ippm   =   emiss_ippm + '%15.5E'%(g_ippm.iloc[i])
 seed_frac    =    seed_frac + '%15.5E'%(p_frac.iloc[i])

# Dilution
#firesize = [1e2, 1e-4, 1e-2, 1e0] # [km2]
#p_dilt1 = [0.01335, -8381.0, -106.5, -0.9539]
#p_dilt2 = [-0.09625, 4.799e+04, 608.2, 4.61]
#p_dilt3 = [0.3197, 2.992e+04, 312.7, 8.166]
#p_dilt4 = [1.0, 1.0, 1.0, 1.0]
firesize = [1e0] # [km2]
p_dilt1  = [-0.9539]
p_dilt2  = [4.61]
p_dilt3  = [8.166]
p_dilt4  = [1.0]

# Background size distribution
# ------------------------------------------------------------
#               9/17/2016, 5/11/2016, 9/11/2016, 4/27/2016, 4/28/2016

#No_bg1 = 1151.    # 959.,     1151.,    1500,    166,      281 [#/cm3]
#Dpm_bg1 = 51.3e-3 # 66.e-3,   51.3e-3,  71.e-3,  39.6e-3,  30.e-3 microns
#sigma_bg1 = 1.6   # 1.8,      1.6,      2.1,     1.6,      1.2
#No_bg2 = 265.     # 50.,      256.,     188.,    158,      273. [#/cm3]
#Dpm_bg2 = 160.e-3 # 223.e-3,  160.e-3,  83.e-3,  132.e-3,  56.3e-3 microns
#sigma_bg2 = 1.3   # 1.2,      1.3,      1.1,     1.4,      1.3
#orgfrac_bg = 0.7  # 0.9,      0.7,      0.7,     0.8,      0.7
                              
# Running --------------------------------------    
print('General information for the following simulations')  
print('======================================================')
print('Simulation: %s'%NAME)            
#print('OH0 =%s'%OH0,'[molec/cm3]')                       
print('inbins = %s'%ibins)
print('COAG = %s'%COAG)
print('boxvol = %s'%boxvol, '[cm3]')
print('alpha = %s'%alpha)
print('pressure = %s'%pres, '[Pa]')
print('temperature = %s'%temp, '[K]')
print('RH = %s'%rh)
print('nh3_moleccm3 = %s'%nh3_moleccm3)

ctr = 0
#for numb in range(len(mod)):
for vwl in VWL:
 for pwl in PWL:
  for OH_conc in a_oh:
   for tend in endtime:
    for db in Dbk:
     for NH3 in nh3_moleccm3:
      #for ppm in ippmprec:
      ctr+=1
      rname = '%s_Cstar%s_T%s_NH3%4.2e_h2so4%4.2e_%4.2e_%4.2e_%04.1f_bg10'%(NAME,regime,params,NH3,h2so4_cm3,OH_conc,db,tend)
      if pwl==1:
       rname = 'PWL_'+rname
       #if vwl==1:
       #    rname = 'VWL_'+rname
       #rname = precursor+'_'+regime+'_'+tend+'_'+no+'_'+dp+'_'+oh+'_'+ppm
       
      print('%i - Simulation'%ctr)
      print('---------------')
      print('VWL = %s'%vwl)
      print('PWL = %s'%pwl)
      print('Db = %s [m2/s]'%db)
      print('Kc = %s [1/s]'%kc)
      print('ke = %s [1/s]'%ke)
      print('OH = %s [molec/cm3]'%OH_conc)
      print('No1 = %s [#/cm3]'%No1)
      print('Dpm1 = %s [um]'%Dpm1)
      print('sigma1 = %s'%sigma1)
      print('No2 = %s [#/cm3]'%No2)
      print('Dpm2 = %s [um]'%Dpm2)
      print('sigma2 = %s'%sigma2)
      #print('ippm = %s [ppm]'%ppm)
      print('time = %s [h]'%tend)
      
      if os.path.exists('../runs/%s'%(rname)):
       os.system('rm -r ../runs/%s'%(rname))
        
      os.system('mkdir ../runs/%s'%(rname))
      os.system('cp ../src/box.exe ../runs/%s/'%(rname))
      os.system('cp ../src/saprc14_rev1.mod ../runs/%s/saprc14_rev1.mod'%(rname))
        
      f1 = open('../runs/%s/input'%(rname),'w')
      f1.write('%s\n'%rname)
      f1.write('%f\n'%aadt)
      f1.write('%i\n'%nintern)
      f1.write('%1i\n'%COAG)
      f1.write('%1i\n'%vwl)
      f1.write('%1i\n'%pwl)
      f1.write('%f\n'%ke)
      f1.write('%f\n'%kw0)
      f1.write('%f\n'%lights_on)
      f1.write('%e\n'%OH_conc) # ***
      f1.write('%e\n'%ax_oh) # ***
      f1.write('%e\n'%b_oh) # ***
      f1.write('%e\n'%bx_oh) # ***
      f1.write('%e\n'%OH_scale)
      f1.write('%15.4f\n'%fion)
      f1.write('%8.1e\n'%cstar_nuc)
      f1.write('%i\n'%org_nuc)
      f1.write('%i\n'%inorg_nuc)
      f1.write('%8.1e\n'%NH3)
      f1.write('%8.1e\n'%h2so4_cm3)
      f1.write('%10.1f\n'%boxvol)
      f1.write('%5.2f\n'%tend) # ***
      f1.write('%8.5f\n'%alpha)
      f1.write('%4.2e\n'%db)
      f1.write('%f\n'%kc)
      f1.write('%8.5f\n'%storg)
      f1.write('%10.3f\n'%pres)
      f1.write('%6.2f\n'%temp)
      f1.write('%8.5f\n'%rh)
      f1.write('%8.5f\n'%No1) # ***
      f1.write('%8.5f\n'%Dpm1) # ***
      f1.write('%8.5g\n'%sigma1)
      f1.write('%8.5f\n'%No2) # ***
      f1.write('%8.5f\n'%Dpm2) # ***
      f1.write('%8.5g\n'%sigma2)
      f1.write('%02i\n'%nsomprec)
      f1.write('%s\n'%somprecname)
      f1.write('%s\n'%dlvp)
      f1.write('%s\n'%poa_1stname)
      f1.write('%s\n'%poa_1st_lenname)
      f1.write('%03i\n'%nspemiss)
      f1.write('%s\n'%emiss_spname)
      f1.write('%s\n'%emiss_ippm)
      f1.write('%s\n'%seed_frac)
      f1.write('%s\n'%seed_dens)
      f1.write('%8.5f\n'%No_bg1)
      f1.write('%8.5f\n'%Dpm_bg1) 
      f1.write('%8.5g\n'%sigma_bg1)
      f1.write('%8.5f\n'%No_bg2)
      f1.write('%8.5f\n'%Dpm_bg2)
      f1.write('%8.5g\n'%sigma_bg2)
      f1.write('%8.5f\n'%density_bg)
      f1.write('%8.6f\n'%orgfrac_bg)
      f1.write('%20.4f\n'%p_dilt1[0])
      f1.write('%20.4f\n'%p_dilt2[0])
      f1.write('%20.4f\n'%p_dilt3[0])
      f1.write('%20.4f\n'%p_dilt4[0])
      f1.close()
      
      # info file
      # ---------------------------------------------------------
      if os.path.exists('../outputs/%s.input'%(rname)):
       print('YES - %s.input exists!'%(rname))
       os.system('rm ../outputs/%s*'%(rname))
      f2 = open('../outputs/%s.input'%rname,'w')
      f2.write('filename    = %s\n'%rname)
      #f2.write('parameterization: %s_%s\n'%(precursor,regime))
      f2.write('aadt        = %s\n'%aadt)
      f2.write('nintern     = %s\n'%nintern)
      f2.write('ibins       = %s\n'%ibins)
      f2.write('COAG        = %s\n'%COAG)
      f2.write('VWL         = %s\n'%vwl)
      f2.write('PWL         = %s\n'%pwl)
      f2.write('ke          = %s [1/s]\n'%ke)
      f2.write('kw0         = %s [1/s]\n'%kw0)
      f2.write('LightsOn    = %s [s]\n'%lights_on)
      f2.write('OH eqn. = a_oh*exp(-1.*ax_oh*t) + b_oh*exp(-1.*bx_oh*t)\n') # ***
      f2.write('a_oh        = %s\n'%OH_conc) # ***
      f2.write('ax_oh       = %s\n'%ax_oh) # ***
      f2.write('b_oh        = %s\n'%b_oh) # ***
      f2.write('bx_oh       = %s\n'%bx_oh) # ***
      f2.write('OH_scale     = %s\n'%OH_scale)
      f2.write('fion        = %s\n'%fion)
      f2.write('cstar_nuc   = %s\n'%cstar_nuc)
      f2.write('org_nuc     = %s\n'%org_nuc)
      f2.write('iorg_nuc    = %s\n'%inorg_nuc)
      f2.write('nh3_moleccm3= %s\n'%NH3)
      f2.write('h2so4_cm3   = %s\n'%h2so4_cm3)
      f2.write('boxvol      = %s [cm3]\n'%boxvol)
      f2.write('endtime     = %s [hours]\n'%tend) # ***
      f2.write('alpha       = %s\n'%alpha)
      f2.write('Db          = %s [m2/s]\n'%db)
      f2.write('Kc          = %s [1/s]\n'%kc)
      f2.write('storg       = %s [N/m]\n'%storg)
      f2.write('pressure    = %s [Pa]\n'%pres)
      f2.write('temperature = %s [K]\n'%temp)
      f2.write('RH          = %s\n'%rh)
      f2.write('No1         = %s [# cm-3]\n'%No1) # ***
      f2.write('Dpm1        = %s [um]\n'%Dpm1) # ***
      f2.write('Sigma1      = %s\n'%sigma1)
      f2.write('No2         = %s [# cm-3]\n'%No2) # ***
      f2.write('Dpm2        = %s [um]\n'%Dpm2) # ***
      f2.write('Sigma2      = %s\n'%sigma2)
      f2.write('nsomprec    = %s\n'%nsomprec)
      f2.write('somprecname = %s\n'%somprecname)
      f2.write('dlvp        = %s\n'%dlvp)
      f2.write('poa_1stname = %s\n'%poa_1stname)
      f2.write('poa_1st_len = %s\n'%poa_1st_lenname)
      f2.write('nspemiss    = %s\n'%nspemiss)
      f2.write('emiss_spname= %s\n'%emiss_spname)
      f2.write('emiss_ippm  = %s\n'%emiss_ippm)
      f2.write('seed_frac   = %s\n'%seed_frac)
      f2.write('seed_dens   = %s\n'%seed_dens)
      f2.write('No_bg1      = %s\n'%No_bg1)
      f2.write('Dpm_bg1     = %s\n'%Dpm_bg1) 
      f2.write('sigma_bg1   = %s\n'%sigma_bg1)
      f2.write('No_bg2      = %s\n'%No_bg2)
      f2.write('Dpm_bg2     = %s\n'%Dpm_bg2)
      f2.write('sigma_bg2   = %s\n'%sigma_bg2)
      f2.write('density_bg  = %s\n'%density_bg)
      f2.write('orgfrac_bg  = %s\n'%orgfrac_bg)
      f2.write('p_dilt1     = %s\n'%p_dilt1[0])
      f2.write('p_dilt2     = %s\n'%p_dilt2[0])
      f2.write('p_dilt3     = %s\n'%p_dilt3[0])
      f2.write('p_dilt4     = %s\n'%p_dilt4[0])
      
      f2.close()
      # ---------------------------------------------------------
      # ************************************************
      #c=os.popen('qstat').read()
      #b=re.findall('alia', c)
      #njobs=len(b)
      #print('b=',b)
      #print('njobs=',len(b))
      
      #while njobs >= maxjobs:
      #   os.system('sleep 5')
      #   c=os.popen('ps -u alia').read()
      #   b=re.findall('box.exe', c)
      #   njobs=len(b)
      # ************************************************
      
      #os.system('sleep 5')

      df4 = open('../inputs/raw_runme.sh', mode='r') # reading the default header file of TOMAS
      runme_line = []
      for i in df4.readlines():
       runme_line.append(i.strip('\n'))
       df4.close()
               
      ind1 = np.where(np.array(runme_line)=='cd run_direct')[0][0]
      runme_line[ind1] = 'cd %s/%s'%(run_directory, rname)
      
      ind2 = np.where(np.array(runme_line)=="echo 'rname'")[0][0]
      runme_line[ind2] = 'echo %s'%(rname)
      
      ind3 = np.where(np.array(runme_line)=='./box.exe <input> /dev/null')[0][0]
      #runme_line[ind3] = './box.exe <input> /dev/null'
      runme_line[ind3] = './box.exe <input> %s.out'%(rname)
      
      #if os.path.exists('runme.sh'):
      #   os.system('rm runme.sh')
      
      runme_out = open('../runs/%s/runme.sh'%(rname), mode='w')
      for i in runme_line:
       runme_out.write(i)
       runme_out.write('\n')
      runme_out.close()

      os.system('cd ../runs/%s/; qsub -cwd -V -pe MPI 1 -q %s ./runme.sh'%(rname, queue))

      #os.system('sleep 1')
        
#keep the compute node from logging out before each box.exe has finished
#test=2
#while test>=1:
#    c=os.popen('ps -u alia').read()
#    b=re.findall('box.exe', c)
#    test=len(b)
#    os.system('sleep 2')



